=========================================
|| Balanced Binary Search Trees (BBST) ||
=========================================

A Balanced Binary Search Tree is a self-balancing binary search tree. This type of tree
will adjust itself in order to maintain a low (logarithmic) height allowing for faster
operations such as insertions and deletions.

Tree Rotations
--------------
The secret ingredient to most BBST algorithms is the clever usage of a <tree invariant>
and <tree rotations>.

A tree invariant is a property/rule you impose on your tree that it must meet after
every operation. To ensure that the invariant is always satisfied a series of tree rotations
are normally applied.

function rightRotate(A):
    B := A.left
    A.left = B.right
    B.right = A
    return B

function rightRotate(A):
    P := A.parent
    B := A.left
    A.left = B.right
    if B.right != null:
        B.right.parent = A
    B.right = A
    A.parent = B
    B.parent = P
    # Update parent down link
    if P != null:
        if P.left == A:
            P.left = B
        else:
            P.right = B
    return B

=========================================
|| Inserting Elements into an AVL Tree ||
=========================================

AVL Tree Invariant
------------------
The property which keeps an AVL tree balanced is called the Balance Factor (BF).

BF(node) = H(node.right) - H(node.left)     |   H(x) is the height of the node x.

The invariant in the AVL which forces it to remain balanced is the requirement that the
balance factor is always either -1, 0 or +1.

Node Information to Store
-------------------------
o The actual value we're storing in the node. NOTE: This value must be comparable so
  we know how to insert it.
o A value storing this node's balance factor.
o The height of this node in the tree.
o Pointers to the left/right child nodes.

# Public facing insert method. Returns true on successful insert and false otherwise

function insert(value):

    if value == null:
        return false

    # Only insert unique values
    if !contains(root, value):
        root = insert(root, value)
        nodeCount = nodeCount + 1
        return true

    # Value already exists in tree
    return false

function insert(node, value):

    if node == null: return Node(value)

    # Invoke the comparator function in whatever
    # programming language you're using.
    cmp := compare(value, node.value)

    if cmp<0:
        node.left = insert(node.left, value)
    else:
        node.right = insert(node.right, value)

    # Update balance factor and height values
    update(node)

    # Re-balance tree
    return balance(node)

function update(node):

    # Variables for left/right subtree heights
    lh := -1
    rh := -1
    if node.left != null:
        lh = node.left.height
    if node.right != null:
        rh = node.right.height

    # Update this node's height
    node.height = 1 + max(lh, rh)

    # Update balance factor
    node.bf = rh - lh

function balance(node):

    # Left heavy subtree
    if node.bf == -2:
        if node.left.bf <= 0:
            return leftLeftCase(node)
        else:
            return leftRightCase(node)

    # Right heavy subtree
    else if node.bf == +2:
        if node.right.bf >= 0:
            return rightRightCase(node)
        else:
            return rightLeftCase(node)

    # Node has balance factor of -1, 0 or +1
    # which we do not need to balance.
    return node

function leftLeftCase(node):
    return rightRotation(node)

function leftRightCase(node):
    node.left = leftRotation(node.left)
    return leftLeftCase(node)

function rightRightCase(node):
    return leftRotation(node)

function rightLeftCase(node):
    node.right = rightRotation(node.right)
    return rightRightCase(node)
