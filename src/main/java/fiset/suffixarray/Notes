==================
|| Suffix Array ||
==================
A suffix array is an array which contains all the sorted suffixes of a string.

->  0   camel       ->  1   amel
->  1   amel        ->  0   camel
->  2   mel         ->  3   el
->  3   el          ->  4   l
->  4   l           ->  2   mel

The suffix array provides a space efficient alternative to a suffix tree which itself is
a compressed version of a trie.

Suffix arrays can do everything suffix trees can, with some additional information such
as a Longest Common Prefix (LCP) array.

===============
|| LCP Array ||
===============
ABABBAB

            Sorted Index   Suffix          LCP Value
0   ABABBAB             5   AB              0
1   BABBAB              0   ABABBAB         2
2   ABBAB               2   ABBAB           2
3   BBAB                6   B               0
4   BAB                 4   BAB             1
5   AB                  1   BABBAB          3
6   B                   3   BBAB            1

The LCP array is an array in which every index tracks how many characters two sorted
adjacent suffixes have in common.

By convention, LCP[0] is undefined, but for most purposes it's fine to set it to zero.

There exists many methods for efficiently constructing the LCP array in O(n * log(n)) and
O(n).

Using SA/LCP array to find unique substrings:
---------------------------------------------
The problem of finding/counting all the unique substrings of a string is a commonplace
problem in computer science. The naive algorithm generates all substrings and places
them in a set resulting in a O(n^2) algorithm. A better approach is to use the LCP array.
This provides not only a quick but also a space efficient solution.

